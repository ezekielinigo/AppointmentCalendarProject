import _extends from "@babel/runtime/helpers/esm/extends";
import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import * as React from 'react';
import { useGridApiContext, useGridRootProps, GridEditModes } from '@mui/x-data-grid-premium';
import Select from '@mui/material/Select';
import MenuItem from '@mui/material/MenuItem';
import ListItemIcon from '@mui/material/ListItemIcon';
import ListItemText from '@mui/material/ListItemText';
import ReportProblemIcon from '@mui/icons-material/ReportProblem';
import InfoIcon from '@mui/icons-material/Info';
import AutorenewIcon from '@mui/icons-material/Autorenew';
import DoneIcon from '@mui/icons-material/Done';
import { STATUS_OPTIONS } from '../services/static-data';
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
function EditStatus(props) {
  var id = props.id,
    value = props.value,
    field = props.field;
  var rootProps = useGridRootProps();
  var apiRef = useGridApiContext();
  var handleChange = /*#__PURE__*/function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(event) {
      var isValid;
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return apiRef.current.setEditCellValue({
              id: id,
              field: field,
              value: event.target.value
            });
          case 2:
            isValid = _context.sent;
            if (isValid && rootProps.editMode === GridEditModes.Cell) {
              apiRef.current.stopCellEditMode({
                id: id,
                field: field,
                cellToFocusAfter: 'below'
              });
            }
          case 4:
          case "end":
            return _context.stop();
        }
      }, _callee);
    }));
    return function handleChange(_x) {
      return _ref.apply(this, arguments);
    };
  }();
  var handleClose = function handleClose(event, reason) {
    if (reason === 'backdropClick') {
      apiRef.current.stopCellEditMode({
        id: id,
        field: field,
        ignoreModifications: true
      });
    }
  };
  return /*#__PURE__*/_jsx(Select, {
    value: value,
    onChange: handleChange,
    MenuProps: {
      onClose: handleClose
    },
    sx: {
      height: '100%',
      '& .MuiSelect-select': {
        display: 'flex',
        alignItems: 'center',
        pl: 1
      }
    },
    autoFocus: true,
    fullWidth: true,
    open: true,
    children: STATUS_OPTIONS.map(function (option) {
      var IconComponent = null;
      if (option === 'Rejected') {
        IconComponent = ReportProblemIcon;
      } else if (option === 'Open') {
        IconComponent = InfoIcon;
      } else if (option === 'PartiallyFilled') {
        IconComponent = AutorenewIcon;
      } else if (option === 'Filled') {
        IconComponent = DoneIcon;
      }
      var label = option;
      if (option === 'PartiallyFilled') {
        label = 'Partially Filled';
      }
      return /*#__PURE__*/_jsxs(MenuItem, {
        value: option,
        children: [/*#__PURE__*/_jsx(ListItemIcon, {
          sx: {
            minWidth: 36
          },
          children: /*#__PURE__*/_jsx(IconComponent, {
            fontSize: "small"
          })
        }), /*#__PURE__*/_jsx(ListItemText, {
          primary: label,
          sx: {
            overflow: 'hidden'
          }
        })]
      }, option);
    })
  });
}
export function renderEditStatus(params) {
  return /*#__PURE__*/_jsx(EditStatus, _extends({}, params));
}