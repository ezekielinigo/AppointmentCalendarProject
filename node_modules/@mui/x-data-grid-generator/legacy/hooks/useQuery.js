import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
import _extends from "@babel/runtime/helpers/esm/extends";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import * as React from 'react';
import { getGridDefaultColumnTypes, GridLogicOperator } from '@mui/x-data-grid-pro';
import { isDeepEqual } from '@mui/x-data-grid/internals';
import { useDemoData, getColumnsFromOptions, getInitialState } from './useDemoData';
import { randomInt } from '../services/random-generator';
var simplifiedValueGetter = function simplifiedValueGetter(field, colDef) {
  return function (row) {
    var _colDef$valueGetter;
    var params = {
      id: row.id,
      row: row,
      field: field,
      rowNode: {}
    };
    // @ts-ignore
    return ((_colDef$valueGetter = colDef.valueGetter) == null ? void 0 : _colDef$valueGetter.call(colDef, params)) || row[field];
  };
};
var getRowComparator = function getRowComparator(sortModel, columnsWithDefaultColDef) {
  if (!sortModel) {
    var _comparator = function _comparator() {
      return 0;
    };
    return _comparator;
  }
  var sortOperators = sortModel.map(function (sortItem) {
    var columnField = sortItem.field;
    var colDef = columnsWithDefaultColDef.find(function (_ref) {
      var field = _ref.field;
      return field === columnField;
    });
    return _extends({}, sortItem, {
      valueGetter: simplifiedValueGetter(columnField, colDef),
      sortComparator: colDef.sortComparator
    });
  });
  var comparator = function comparator(row1, row2) {
    return sortOperators.reduce(function (acc, _ref2) {
      var valueGetter = _ref2.valueGetter,
        sort = _ref2.sort,
        sortComparator = _ref2.sortComparator;
      if (acc !== 0) {
        return acc;
      }
      var v1 = valueGetter(row1);
      var v2 = valueGetter(row2);
      return sort === 'desc' ? -1 * sortComparator(v1, v2) : sortComparator(v1, v2);
    }, 0);
  };
  return comparator;
};
var getFilteredRows = function getFilteredRows(rows, filterModel, columnsWithDefaultColDef) {
  if (filterModel === undefined || filterModel.items.length === 0) {
    return rows;
  }
  var valueGetters = filterModel.items.map(function (_ref3) {
    var field = _ref3.field;
    return simplifiedValueGetter(field, columnsWithDefaultColDef.find(function (column) {
      return column.field === field;
    }));
  });
  var filterFunctions = filterModel.items.map(function (filterItem) {
    var field = filterItem.field,
      operator = filterItem.operator;
    var colDef = columnsWithDefaultColDef.find(function (column) {
      return column.field === field;
    });
    var filterOperator = colDef.filterOperators.find(function (_ref4) {
      var value = _ref4.value;
      return operator === value;
    });
    var parsedValue = filterItem.value;
    if (colDef.valueParser) {
      var _filterItem$value;
      var parser = colDef.valueParser;
      parsedValue = Array.isArray(filterItem.value) ? (_filterItem$value = filterItem.value) == null ? void 0 : _filterItem$value.map(function (x) {
        return parser(x);
      }) : parser(filterItem.value);
    }
    return filterOperator == null ? void 0 : filterOperator.getApplyFilterFn({
      filterItem: filterItem,
      value: parsedValue
    }, colDef);
  });
  if (filterModel.logicOperator === GridLogicOperator.Or) {
    return rows.filter(function (row) {
      return filterModel.items.some(function (_, index) {
        var value = valueGetters[index](row);
        return filterFunctions[index] === null ? true : filterFunctions[index]({
          value: value
        });
      });
    });
  }
  return rows.filter(function (row) {
    return filterModel.items.every(function (_, index) {
      var value = valueGetters[index](row);
      return filterFunctions[index] === null ? true : filterFunctions[index]({
        value: value
      });
    });
  });
};

/**
 * Simulates server data loading
 */
export var loadServerRows = function loadServerRows(rows, queryOptions, serverOptions, columnsWithDefaultColDef) {
  var _serverOptions$minDel = serverOptions.minDelay,
    minDelay = _serverOptions$minDel === void 0 ? 100 : _serverOptions$minDel,
    _serverOptions$maxDel = serverOptions.maxDelay,
    maxDelay = _serverOptions$maxDel === void 0 ? 300 : _serverOptions$maxDel,
    useCursorPagination = serverOptions.useCursorPagination;
  if (maxDelay < minDelay) {
    throw new Error('serverOptions.minDelay is larger than serverOptions.maxDelay ');
  }
  var delay = randomInt(minDelay, maxDelay);
  var cursor = queryOptions.cursor,
    _queryOptions$page = queryOptions.page,
    page = _queryOptions$page === void 0 ? 0 : _queryOptions$page,
    pageSize = queryOptions.pageSize;
  var nextCursor;
  var firstRowIndex;
  var lastRowIndex;
  var filteredRows = getFilteredRows(rows, queryOptions.filterModel, columnsWithDefaultColDef);
  var rowComparator = getRowComparator(queryOptions.sortModel, columnsWithDefaultColDef);
  filteredRows = _toConsumableArray(filteredRows).sort(rowComparator);
  var totalRowCount = filteredRows.length;
  if (!pageSize) {
    firstRowIndex = 0;
    lastRowIndex = filteredRows.length;
  } else if (useCursorPagination) {
    firstRowIndex = cursor ? filteredRows.findIndex(function (_ref5) {
      var id = _ref5.id;
      return id === cursor;
    }) : 0;
    firstRowIndex = Math.max(firstRowIndex, 0); // if cursor not found return 0
    lastRowIndex = firstRowIndex + pageSize;
    nextCursor = lastRowIndex >= filteredRows.length ? undefined : filteredRows[lastRowIndex].id;
  } else {
    firstRowIndex = page * pageSize;
    lastRowIndex = (page + 1) * pageSize;
  }
  var response = {
    returnedRows: filteredRows.slice(firstRowIndex, lastRowIndex),
    nextCursor: nextCursor,
    totalRowCount: totalRowCount
  };
  return new Promise(function (resolve) {
    setTimeout(function () {
      resolve(response);
    }, delay); // simulate network latency
  });
};
var DEFAULT_DATASET_OPTIONS = {
  dataSet: 'Commodity',
  rowLength: 100,
  maxColumns: 6
};
var disableDelay = typeof DISABLE_CHANCE_RANDOM !== 'undefined' && DISABLE_CHANCE_RANDOM;
var DEFAULT_SERVER_OPTIONS = {
  minDelay: disableDelay ? 0 : 100,
  maxDelay: disableDelay ? 0 : 300,
  useCursorPagination: true
};
export var createFakeServer = function createFakeServer(dataSetOptions, serverOptions) {
  var dataSetOptionsWithDefault = _extends({}, DEFAULT_DATASET_OPTIONS, dataSetOptions);
  var serverOptionsWithDefault = _extends({}, DEFAULT_SERVER_OPTIONS, serverOptions);
  var columns = getColumnsFromOptions(dataSetOptionsWithDefault);
  var initialState = getInitialState(dataSetOptionsWithDefault, columns);
  var defaultColDef = getGridDefaultColumnTypes();
  var columnsWithDefaultColDef = columns.map(function (column) {
    return _extends({}, defaultColDef[column.type || 'string'], column);
  });
  var useQuery = function useQuery(queryOptions) {
    var _useDemoData = useDemoData(dataSetOptionsWithDefault),
      rows = _useDemoData.data.rows,
      dataGenerationIsLoading = _useDemoData.loading;
    var queryOptionsRef = React.useRef(queryOptions);
    var _React$useState = React.useState({
        pageInfo: {},
        rows: []
      }),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      response = _React$useState2[0],
      setResponse = _React$useState2[1];
    var _React$useState3 = React.useState(dataGenerationIsLoading),
      _React$useState4 = _slicedToArray(_React$useState3, 2),
      isLoading = _React$useState4[0],
      setIsLoading = _React$useState4[1];
    React.useEffect(function () {
      if (dataGenerationIsLoading) {
        // dataset is not ready
        return function () {};
      }
      queryOptionsRef.current = queryOptions;
      var active = true;
      setIsLoading(true);
      setResponse(function (prev) {
        return Object.keys(prev.pageInfo).length === 0 ? prev : _extends({}, prev, {
          pageInfo: {}
        });
      });
      (function () {
        var _fetchData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
          var _yield$loadServerRows, returnedRows, nextCursor, totalRowCount, newRep;
          return _regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return loadServerRows(rows, queryOptions, serverOptionsWithDefault, columnsWithDefaultColDef);
              case 2:
                _yield$loadServerRows = _context.sent;
                returnedRows = _yield$loadServerRows.returnedRows;
                nextCursor = _yield$loadServerRows.nextCursor;
                totalRowCount = _yield$loadServerRows.totalRowCount;
                if (active) {
                  _context.next = 8;
                  break;
                }
                return _context.abrupt("return");
              case 8:
                newRep = {
                  rows: returnedRows,
                  pageInfo: {
                    totalRowCount: totalRowCount,
                    nextCursor: nextCursor,
                    pageSize: returnedRows.length
                  }
                };
                setResponse(function (prev) {
                  return isDeepEqual(prev, newRep) ? prev : newRep;
                });
                setIsLoading(false);
              case 11:
              case "end":
                return _context.stop();
            }
          }, _callee);
        }));
        function fetchData() {
          return _fetchData.apply(this, arguments);
        }
        return fetchData;
      })()();
      return function () {
        active = false;
      };
    }, [dataGenerationIsLoading, queryOptions, rows]);

    // We use queryOptions pointer to be sure that isLoading===true as soon as the options change
    var effectShouldStart = queryOptionsRef.current !== queryOptions;
    return _extends({
      isLoading: isLoading || effectShouldStart
    }, response);
  };
  return {
    columns: columns,
    columnsWithDefaultColDef: columnsWithDefaultColDef,
    initialState: initialState,
    useQuery: useQuery
  };
};